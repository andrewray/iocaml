(* 
 * iocaml - an OCaml kernel for IPython
 *
 *   (c) 2014 MicroJamJar Ltd
 *
 * Author(s): andy.ray@ujamjar.com
 * Description: JSON messages sent to/from the kernel
 *
 *)

type dyn <ocaml module="Yojson.Safe" t="json"> = abstract

(* connection information provided by file in $(PROFILE)/secutiry *)
type connection_info = {
    stdin_port : int;
    ip : string;
    control_port : int;
    hb_port : int;
    signature_scheme : string;
    key : string;
    shell_port : int;
    transport : string;
    iopub_port : int;
}

(* header (and parent) information in ZMQ messages *)
type header_info = {
    ~version: string;
    ~date : string;
    ~username : string;
    ~session : string;
    ~msg_id : string;
    ~msg_type : string;
}

(*********************************************************************)
(* code execution *)
(*********************************************************************)

type execute_request = {
    code : string;
    silent : bool;
    store_history : bool;
    user_expressions : dyn;
    allow_stdin : bool;
}

type payload = {
    html : string;
    source : string;
    start_line_number : int;
    text : string;
}

type execute_reply = {
    status : string;
    execution_count : int;
    (* if there was an error *)
    ?ename : string option;
    ?evalue : string option;
    ?traceback : string list option;
    (* if execution was ok *)
    ?payload : payload list option;
    ?er_user_expressions <json name="user_expressions"> : dyn option;
}

(*********************************************************************)
(* object info *)
(*********************************************************************)

type inspect_request = {
    code : string;
    cursor_pos : int;
    detail_level : int;
}

type arg_spec = {
    args : string list;
    varargs : string;
    varkw : string;
    defaults : string list;
}

type inspect_reply = {
    status: string;
    found: bool;
    data: dyn;
    metadata: dyn;
}

(*********************************************************************)
(* code completion *)
(*********************************************************************)

type complete_request = {
    code : string;
    cursor_pos : int;
}

type complete_reply = {
    matches : string list;
    cursor_start : int;
    cursor_end : int;
    cr_status <json name="status"> : string;
}

(*********************************************************************)
(* history *)
(*********************************************************************)

type history_request = {
    output : bool;
    raw : bool;
    hist_access_type : string;
    ~hr_session <json name="session"> : int;
    ~start : int;
    ~stop : int;
    n : int;
    ~pattern : string;
    ~unique : bool;
}

type history_reply = {
    history : string list; (* XXX *)
}

(*********************************************************************)
(* connection information *)
(*********************************************************************)

type connect_reply = {
    cr_shell_port <json name="shell_port"> : int; 
    cr_iopub_port <json name="iopub_port"> : int; 
    cr_stdin_port <json name="stdin_port"> : int;
    cr_hb_port <json name="hb_port"> : int; 
}

(*********************************************************************)
(* kernel information *)
(*********************************************************************)

type kernel_language_info = {
  name : string;
  version : string;
  mimetype : string;
  file_extension : string;
  codemirror_mode : string;
}

type help_link = {
  text : string;
  url : string;
}

type kernel_info_reply = {
    protocol_version : string;
    implementation : string;
    implementation_version : string;
    language_info : kernel_language_info;
    help_links : help_link list;
}

(*********************************************************************)
(* kernel status *)
(*********************************************************************)

type status = {
    execution_state : string;
}

(*********************************************************************)
(* kernel shutdown *)
(*********************************************************************)

type shutdown = {
    restart : bool;
}

(*********************************************************************)
(*********************************************************************)

type display_data = {
    dd_source <json name="source"> : string;
    dd_data <json name="data"> : dyn;
    dd_metadata <json name="metadata"> : dyn;
}

(*********************************************************************)
(*********************************************************************)

type execute_input = {
    pi_code <json name="code"> : string;
    pi_execution_count <json name="execution_count"> : int;
}

(*********************************************************************)
(*********************************************************************)

type execute_result = {
    po_execution_count <json name="execution_count"> : int;
    po_data <json name="data"> : dyn;
    po_metadata <json name="metadata"> : dyn;
}

(*********************************************************************)
(*********************************************************************)

type stream = {
    st_name <json name="name"> : string;
    st_text <json name="text"> : string;
}

(*********************************************************************)
(*********************************************************************)

type clear_output = {
    wait : bool;
}


